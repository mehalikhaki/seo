{"ast":null,"code":"var _jsxFileName = \"/Users/alikhaki/SEO Analyzer/seo-analyzer-1/src/components/MetaTagsAnalyzer.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetaTagsAnalyzer = ({\n  htmlContent\n}) => {\n  const metaTags = parseMetaTags(htmlContent); // Assume parseMetaTags is a function that extracts meta tags from HTML\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SEO Meta Tags\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: metaTags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [tag.name, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }, this), \" \", tag.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n_c = MetaTagsAnalyzer;\nexport default MetaTagsAnalyzer;\nvar _c;\n$RefreshReg$(_c, \"MetaTagsAnalyzer\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MetaTagsAnalyzer","htmlContent","metaTags","parseMetaTags","children","fileName","_jsxFileName","lineNumber","columnNumber","map","tag","index","name","content","_c","$RefreshReg$"],"sources":["/Users/alikhaki/SEO Analyzer/seo-analyzer-1/src/components/MetaTagsAnalyzer.tsx"],"sourcesContent":["import React from 'react';\nimport { MetaTags } from '../types/MetaTags';\n\ninterface MetaTagsAnalyzerProps {\n    htmlContent: string;\n}\n\nconst MetaTagsAnalyzer: React.FC<MetaTagsAnalyzerProps> = ({ htmlContent }) => {\n    const metaTags: MetaTags = parseMetaTags(htmlContent); // Assume parseMetaTags is a function that extracts meta tags from HTML\n\n    return (\n        <div>\n            <h2>SEO Meta Tags</h2>\n            <ul>\n                {metaTags.map((tag, index) => (\n                    <li key={index}>\n                        <strong>{tag.name}:</strong> {tag.content}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default MetaTagsAnalyzer;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1B,MAAMC,gBAAiD,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAC3E,MAAMC,QAAkB,GAAGC,aAAa,CAACF,WAAW,CAAC,CAAC,CAAC;;EAEvD,oBACIF,OAAA;IAAAK,QAAA,gBACIL,OAAA;MAAAK,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBT,OAAA;MAAAK,QAAA,EACKF,QAAQ,CAACO,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrBZ,OAAA;QAAAK,QAAA,gBACIL,OAAA;UAAAK,QAAA,GAASM,GAAG,CAACE,IAAI,EAAC,GAAC;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACE,GAAG,CAACG,OAAO;MAAA,GADpCF,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACM,EAAA,GAfId,gBAAiD;AAiBvD,eAAeA,gBAAgB;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}