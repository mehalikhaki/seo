{"ast":null,"code":"function createDOM(html) {\n  const parser = new DOMParser();\n  return parser.parseFromString(html, 'text/html');\n}\nexport function parseMetaTags(html) {\n  const metaTags = {};\n  const doc = createDOM(html);\n\n  // Get title\n  const titleElement = doc.querySelector('title');\n  if (titleElement) {\n    metaTags['title'] = titleElement.textContent || '';\n  }\n\n  // Get meta tags\n  doc.querySelectorAll('meta').forEach(meta => {\n    const name = meta.getAttribute('name');\n    const property = meta.getAttribute('property');\n    const content = meta.getAttribute('content') || '';\n    if (name) {\n      metaTags[name] = content;\n    }\n    if (property) {\n      metaTags[property] = content;\n    }\n  });\n\n  // Get description from meta description\n  const descriptionMeta = doc.querySelector('meta[name=\"description\"]');\n  if (descriptionMeta) {\n    metaTags['description'] = descriptionMeta.getAttribute('content') || '';\n  }\n\n  // Get canonical link\n  const canonicalLink = doc.querySelector('link[rel=\"canonical\"]');\n  if (canonicalLink) {\n    metaTags['canonical'] = canonicalLink.getAttribute('href') || '';\n  }\n\n  // Handle charset\n  const charsetMeta = doc.querySelector('meta[charset]');\n  if (charsetMeta) {\n    metaTags['charset'] = charsetMeta.getAttribute('charset') || '';\n  }\n\n  // Get viewport\n  const viewportMeta = doc.querySelector('meta[name=\"viewport\"]');\n  if (viewportMeta) {\n    metaTags['viewport'] = viewportMeta.getAttribute('content') || '';\n  }\n\n  // Get robots\n  const robotsMeta = doc.querySelector('meta[name=\"robots\"]');\n  if (robotsMeta) {\n    metaTags['robots'] = robotsMeta.getAttribute('content') || '';\n  }\n  return metaTags;\n}","map":{"version":3,"names":["createDOM","html","parser","DOMParser","parseFromString","parseMetaTags","metaTags","doc","titleElement","querySelector","textContent","querySelectorAll","forEach","meta","name","getAttribute","property","content","descriptionMeta","canonicalLink","charsetMeta","viewportMeta","robotsMeta"],"sources":["/Users/alikhaki/SEO Analyzer/seo-analyzer-1/src/services/metaTagsParser.ts"],"sourcesContent":["function createDOM(html: string): Document {\n    const parser = new DOMParser();\n    return parser.parseFromString(html, 'text/html');\n}\n\nexport function parseMetaTags(html: string): Record<string, string> {\n    const metaTags: Record<string, string> = {};\n    const doc = createDOM(html);\n\n    // Get title\n    const titleElement = doc.querySelector('title');\n    if (titleElement) {\n        metaTags['title'] = titleElement.textContent || '';\n    }\n\n    // Get meta tags\n    doc.querySelectorAll('meta').forEach((meta) => {\n        const name = meta.getAttribute('name');\n        const property = meta.getAttribute('property');\n        const content = meta.getAttribute('content') || '';\n\n        if (name) {\n            metaTags[name] = content;\n        }\n        if (property) {\n            metaTags[property] = content;\n        }\n    });\n\n    // Get description from meta description\n    const descriptionMeta = doc.querySelector('meta[name=\"description\"]');\n    if (descriptionMeta) {\n        metaTags['description'] = descriptionMeta.getAttribute('content') || '';\n    }\n\n    // Get canonical link\n    const canonicalLink = doc.querySelector('link[rel=\"canonical\"]');\n    if (canonicalLink) {\n        metaTags['canonical'] = canonicalLink.getAttribute('href') || '';\n    }\n\n    // Handle charset\n    const charsetMeta = doc.querySelector('meta[charset]');\n    if (charsetMeta) {\n        metaTags['charset'] = charsetMeta.getAttribute('charset') || '';\n    }\n\n    // Get viewport\n    const viewportMeta = doc.querySelector('meta[name=\"viewport\"]');\n    if (viewportMeta) {\n        metaTags['viewport'] = viewportMeta.getAttribute('content') || '';\n    }\n\n    // Get robots\n    const robotsMeta = doc.querySelector('meta[name=\"robots\"]');\n    if (robotsMeta) {\n        metaTags['robots'] = robotsMeta.getAttribute('content') || '';\n    }\n\n    return metaTags;\n}"],"mappings":"AAAA,SAASA,SAASA,CAACC,IAAY,EAAY;EACvC,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;EAC9B,OAAOD,MAAM,CAACE,eAAe,CAACH,IAAI,EAAE,WAAW,CAAC;AACpD;AAEA,OAAO,SAASI,aAAaA,CAACJ,IAAY,EAA0B;EAChE,MAAMK,QAAgC,GAAG,CAAC,CAAC;EAC3C,MAAMC,GAAG,GAAGP,SAAS,CAACC,IAAI,CAAC;;EAE3B;EACA,MAAMO,YAAY,GAAGD,GAAG,CAACE,aAAa,CAAC,OAAO,CAAC;EAC/C,IAAID,YAAY,EAAE;IACdF,QAAQ,CAAC,OAAO,CAAC,GAAGE,YAAY,CAACE,WAAW,IAAI,EAAE;EACtD;;EAEA;EACAH,GAAG,CAACI,gBAAgB,CAAC,MAAM,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;IAC3C,MAAMC,IAAI,GAAGD,IAAI,CAACE,YAAY,CAAC,MAAM,CAAC;IACtC,MAAMC,QAAQ,GAAGH,IAAI,CAACE,YAAY,CAAC,UAAU,CAAC;IAC9C,MAAME,OAAO,GAAGJ,IAAI,CAACE,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE;IAElD,IAAID,IAAI,EAAE;MACNR,QAAQ,CAACQ,IAAI,CAAC,GAAGG,OAAO;IAC5B;IACA,IAAID,QAAQ,EAAE;MACVV,QAAQ,CAACU,QAAQ,CAAC,GAAGC,OAAO;IAChC;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMC,eAAe,GAAGX,GAAG,CAACE,aAAa,CAAC,0BAA0B,CAAC;EACrE,IAAIS,eAAe,EAAE;IACjBZ,QAAQ,CAAC,aAAa,CAAC,GAAGY,eAAe,CAACH,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE;EAC3E;;EAEA;EACA,MAAMI,aAAa,GAAGZ,GAAG,CAACE,aAAa,CAAC,uBAAuB,CAAC;EAChE,IAAIU,aAAa,EAAE;IACfb,QAAQ,CAAC,WAAW,CAAC,GAAGa,aAAa,CAACJ,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE;EACpE;;EAEA;EACA,MAAMK,WAAW,GAAGb,GAAG,CAACE,aAAa,CAAC,eAAe,CAAC;EACtD,IAAIW,WAAW,EAAE;IACbd,QAAQ,CAAC,SAAS,CAAC,GAAGc,WAAW,CAACL,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE;EACnE;;EAEA;EACA,MAAMM,YAAY,GAAGd,GAAG,CAACE,aAAa,CAAC,uBAAuB,CAAC;EAC/D,IAAIY,YAAY,EAAE;IACdf,QAAQ,CAAC,UAAU,CAAC,GAAGe,YAAY,CAACN,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE;EACrE;;EAEA;EACA,MAAMO,UAAU,GAAGf,GAAG,CAACE,aAAa,CAAC,qBAAqB,CAAC;EAC3D,IAAIa,UAAU,EAAE;IACZhB,QAAQ,CAAC,QAAQ,CAAC,GAAGgB,UAAU,CAACP,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE;EACjE;EAEA,OAAOT,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}