{"ast":null,"code":"export function parseMetaTags(html) {\n  const metaTags = {};\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n  const metaElements = doc.querySelectorAll('meta');\n  metaElements.forEach(meta => {\n    const name = meta.getAttribute('name');\n    const property = meta.getAttribute('property');\n    const content = meta.getAttribute('content');\n    if (name) {\n      metaTags[name] = content || '';\n    } else if (property) {\n      metaTags[property] = content || '';\n    }\n  });\n  return metaTags;\n}","map":{"version":3,"names":["parseMetaTags","html","metaTags","parser","DOMParser","doc","parseFromString","metaElements","querySelectorAll","forEach","meta","name","getAttribute","property","content"],"sources":["/Users/alikhaki/SEO Analyzer/seo-analyzer-1/src/services/metaTagsParser.ts"],"sourcesContent":["export function parseMetaTags(html: string): Record<string, string> {\n    const metaTags: Record<string, string> = {};\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n\n    const metaElements = doc.querySelectorAll('meta');\n\n    metaElements.forEach((meta) => {\n        const name = meta.getAttribute('name');\n        const property = meta.getAttribute('property');\n        const content = meta.getAttribute('content');\n\n        if (name) {\n            metaTags[name] = content || '';\n        } else if (property) {\n            metaTags[property] = content || '';\n        }\n    });\n\n    return metaTags;\n}"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,IAAY,EAA0B;EAChE,MAAMC,QAAgC,GAAG,CAAC,CAAC;EAC3C,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;EAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACL,IAAI,EAAE,WAAW,CAAC;EAErD,MAAMM,YAAY,GAAGF,GAAG,CAACG,gBAAgB,CAAC,MAAM,CAAC;EAEjDD,YAAY,CAACE,OAAO,CAAEC,IAAI,IAAK;IAC3B,MAAMC,IAAI,GAAGD,IAAI,CAACE,YAAY,CAAC,MAAM,CAAC;IACtC,MAAMC,QAAQ,GAAGH,IAAI,CAACE,YAAY,CAAC,UAAU,CAAC;IAC9C,MAAME,OAAO,GAAGJ,IAAI,CAACE,YAAY,CAAC,SAAS,CAAC;IAE5C,IAAID,IAAI,EAAE;MACNT,QAAQ,CAACS,IAAI,CAAC,GAAGG,OAAO,IAAI,EAAE;IAClC,CAAC,MAAM,IAAID,QAAQ,EAAE;MACjBX,QAAQ,CAACW,QAAQ,CAAC,GAAGC,OAAO,IAAI,EAAE;IACtC;EACJ,CAAC,CAAC;EAEF,OAAOZ,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}